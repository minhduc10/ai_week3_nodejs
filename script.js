class Chatbot {
    constructor() {
        // Ki·ªÉm tra elements c√≥ t·ªìn t·∫°i kh√¥ng
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.typingIndicator = document.getElementById('typingIndicator');
        
        if (!this.chatMessages || !this.messageInput || !this.sendButton || !this.typingIndicator) {
            console.error('‚ùå Some required elements not found!');
            console.log('chatMessages:', this.chatMessages);
            console.log('messageInput:', this.messageInput);
            console.log('sendButton:', this.sendButton);
            console.log('typingIndicator:', this.typingIndicator);
            return;
        }
        
        console.log('‚úÖ All elements found successfully');
        
        // Kh·ªüi t·∫°o conversation history v·ªõi system prompt
        this.conversationHistory = [
            {
                "role": "system", 
                "content": `You are a helpful assistant
        You are the MindTek AI Assistant ‚Äî a friendly and helpful virtual assistant representing MindTek AI, a company that offers AI consulting and implementation services.

                            Your goal is to guide users through a structured discovery conversation to understand their industry, challenges, and contact details, and recommend appropriate services.

                            üí¨ Always keep responses short, helpful, and polite.
                            üí¨ Always reply in the same language the user speaks.
                            üí¨ Ask only one question at a time.

                            üîç RECOMMENDED SERVICES:
                            - For real estate: Mention customer data extraction from documents, integration with CRM, and lead generation via 24/7 chatbots.
                            - For education: Mention email automation and AI training.
                            - For retail/customer service: Mention voice-based customer service chatbots, digital marketing, and AI training.
                            - For other industries: Mention chatbots, process automation, and digital marketing.
                            ‚úÖ BENEFITS: Emphasize saving time, reducing costs, and improving customer satisfaction.
                            üí∞ PRICING: Only mention "starting from $1000 USD" if the user explicitly asks about pricing.

                            üß† CONVERSATION FLOW:
                            1. Ask what industry the user works in.
                            2. Then ask what specific challenges or goals they have.
                            3. Based on that, recommend relevant MindTek AI services.
                            4. Ask if they would like to learn more about the solutions.
                            5. If yes, collect their name ‚Üí email ‚Üí phone number (one at a time).
                            6. Provide a more technical description of the solution and invite them to book a free consultation.
                            7. Finally, ask if they have any notes or questions before ending the chat.
                            ‚ö†Ô∏è OTHER RULES:
                            - Be friendly but concise.
                            - Do not ask multiple questions at once.
                            - Do not mention pricing unless asked.
                            - Stay on-topic and professional throughout the conversation.`
            }
        ];
        
        // C·∫•u h√¨nh cho deployment (Vercel ho·∫∑c local)
        this.apiUrl = window.location.hostname === 'localhost' 
            ? 'http://localhost:5000/chat'  // Local development
            : '/chat';  // Production (Vercel)
        
        this.init();
    }
    
    init() {
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
        
        this.messageInput.focus();
    }
    
    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message) return;
        
        this.addMessage(message, 'user');
        this.messageInput.value = '';
        
        // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i
        this.conversationHistory.push({"role": "user", "content": message});
        
        this.showTypingIndicator();
        
        try {
            const response = await this.generateResponse();
            this.hideTypingIndicator();
            this.addMessage(response, 'bot');
            
            // Th√™m ph·∫£n h·ªìi c·ªßa AI v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i
            this.conversationHistory.push({"role": "assistant", "content": response});
        } catch (error) {
            this.hideTypingIndicator();
            const errorMessage = "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.";
            this.addMessage(errorMessage, 'bot');
            console.error('Error:', error);
        }
    }
    
    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        const time = new Date().toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        messageDiv.innerHTML = `
            <div class="message-bubble">${this.escapeHtml(text)}</div>
            <div class="message-time">${time}</div>
        `;
        
        this.chatMessages.insertBefore(messageDiv, this.typingIndicator);
        this.scrollToBottom();
    }
    
    async generateResponse() {
        console.log('üîç ƒêang g·ª≠i request t·ªõi local server...');
        console.log('Conversation history:', this.conversationHistory);

        try {
            const requestBody = {
                messages: this.conversationHistory
            };
            
            console.log('Request body:', requestBody);

            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            console.log('Response status:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Server Error Response:', errorText);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }

            const data = await response.json();
            console.log('‚úÖ Server Response successful:', data);
            
            if (data.success) {
                return data.message;
            } else {
                throw new Error(data.error || 'Unknown server error');
            }
        } catch (error) {
            console.error('‚ùå Server Error Details:', error);
            
            // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
            let errorMessage = "Xin l·ªói, c√≥ l·ªói x·∫£y ra v·ªõi d·ªãch v·ª• AI.";
            
            if (error.message.includes('Failed to fetch')) {
                errorMessage = "üîå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ch·∫°y: python chatbot_server.py";
            } else if (error.message.includes('500')) {
                errorMessage = "üö® L·ªói server. Vui l√≤ng ki·ªÉm tra API key trong file .env";
            }
            
            return errorMessage + `\n\nüîß Chi ti·∫øt l·ªói: ${error.message}`;
        }
    }
    
    showTypingIndicator() {
        this.typingIndicator.style.display = 'flex';
        this.scrollToBottom();
    }
    
    hideTypingIndicator() {
        this.typingIndicator.style.display = 'none';
    }
    
    scrollToBottom() {
        setTimeout(() => {
            this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        }, 100);
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    // Method ƒë·ªÉ t·∫£i API key t·ª´ localStorage
    loadApiKey() {
        return localStorage.getItem('openai_api_key') || '';
    }
    
    // Method ƒë·ªÉ l∆∞u API key v√†o localStorage
    setApiKey(key) {
        this.apiKey = key;
        localStorage.setItem('openai_api_key', key);
    }
    
    // Method ƒë·ªÉ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i
    clearConversation() {
        this.conversationHistory = [this.conversationHistory[0]]; // Gi·ªØ l·∫°i system prompt
        this.chatMessages.innerHTML = '<div id="typingIndicator" class="typing-indicator"><span></span><span></span><span></span></div>';
        this.typingIndicator = document.getElementById('typingIndicator');
    }
    
    // Method ƒë·ªÉ xu·∫•t l·ªãch s·ª≠ h·ªôi tho·∫°i
    exportConversation() {
        const conversation = {
            timestamp: new Date().toISOString(),
            messages: this.conversationHistory.slice(1) // B·ªè system prompt
        };
        return JSON.stringify(conversation, null, 2);
    }
}

// Kh·ªüi t·∫°o chatbot khi trang web ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM Content Loaded, initializing chatbot...');
    try {
        window.chatbot = new Chatbot();
        console.log('‚úÖ Chatbot initialized successfully');
    } catch (error) {
        console.error('‚ùå Error initializing chatbot:', error);
    }
    
    // Th√™m helper functions ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
    window.clearChat = () => window.chatbot.clearConversation();
    window.exportChat = () => window.chatbot.exportConversation();
    window.debugServer = () => {
        console.log('üîç Debug Server Information:');
        console.log('Server URL:', window.chatbot.apiUrl);
        console.log('Conversation History Length:', window.chatbot.conversationHistory.length);
        return 'Check console for debug info';
    };
    window.testServer = async () => {
        console.log('üß™ Testing server connection...');
        const isLocal = window.location.hostname === 'localhost';
        
        const healthUrls = isLocal 
            ? ['http://localhost:5000/health']
            : ['/health', '/api/health'];
        
        for (const healthUrl of healthUrls) {
            try {
                console.log(`Testing: ${healthUrl}`);
                const response = await fetch(healthUrl);
                const data = await response.json();
                console.log('‚úÖ Server test successful:', data);
                return data;
            } catch (error) {
                console.warn(`‚ùå Failed ${healthUrl}:`, error.message);
            }
        }
        
        return 'All health endpoints failed';
    };
    
    // Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
    setTimeout(() => {
        const isLocal = window.location.hostname === 'localhost';
        const welcomeMessage = isLocal 
            ? "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi MindTek AI Assistant! ü§ñ\n\n" +
              "üîí API key ƒë∆∞·ª£c b·∫£o m·∫≠t trong server backend.\n" +
              "üìã Local Development Mode:\n" +
              "1. Ch·∫°y: python chatbot_server.py\n" +
              "2. C·∫•u h√¨nh API key trong file .env\n" +
              "3. B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán!\n\n" +
              "H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch cho t√¥i bi·∫øt b·∫°n l√†m vi·ªác trong lƒ©nh v·ª±c g√¨? üòä"
            : "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi MindTek AI Assistant! ü§ñ\n\n" +
              "üöÄ Production Mode - API key ƒë∆∞·ª£c b·∫£o m·∫≠t tr√™n Vercel\n" +
              "üí° T√¥i ƒë√£ s·∫µn s√†ng t∆∞ v·∫•n d·ªãch v·ª• AI cho doanh nghi·ªáp c·ªßa b·∫°n!\n\n" +
              "H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch cho t√¥i bi·∫øt b·∫°n l√†m vi·ªác trong lƒ©nh v·ª±c g√¨? üòä";
        window.chatbot.addMessage(welcomeMessage, 'bot');
    }, 1000);
});
